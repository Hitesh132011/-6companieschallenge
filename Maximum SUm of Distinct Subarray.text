class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int, int> mp;
        long long currentSum = 0;
        
        for (int i = 0; i < k; ++i) {
            mp[nums[i]]++;
            currentSum += nums[i];
        }
        
        long long maxSum = (mp.size() == k) ? currentSum : 0;
        int l = 0;

        for (int i = k; i < n; ++i) {
            mp[nums[i]]++;
            currentSum += nums[i];

            mp[nums[l]]--;
            if (mp[nums[l]] == 0) {
                mp.erase(nums[l]);
            }
            currentSum -= nums[l];
            l++;

            if (mp.size() == k) {
                maxSum = max(maxSum, currentSum);
            }
        }

        return maxSum;
    }
};
