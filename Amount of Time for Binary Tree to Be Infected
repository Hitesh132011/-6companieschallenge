/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(unordered_map<int, vector<int>>& s, TreeNode* root) {
        if (root == nullptr) return;
        
        if (root->left != nullptr) {
            s[root->val].push_back(root->left->val);
            s[root->left->val].push_back(root->val);
            solve(s, root->left);
        }
        if (root->right != nullptr) {
            s[root->val].push_back(root->right->val);
            s[root->right->val].push_back(root->val);
            solve(s, root->right);
        }
    }

    int amountOfTime(TreeNode* root, int start) {
        if (root == nullptr) return 0;

        unordered_map<int, vector<int>> s;
        solve(s, root);

        queue<pair<int, int>> pq;
        unordered_set<int> vis;
        pq.push({start, 0});
        int time = 0;

        while (!pq.empty()) {
            int k = pq.front().first;
            int t = pq.front().second;
            pq.pop();

            if (vis.find(k) == vis.end()) {
                vis.insert(k);
                for (auto it : s[k]) {
                    if (vis.find(it) == vis.end()) {
                        pq.push({it, t + 1});
                    }
                }
                time = max(time, t);
            }
        }
        return time;
    }
};
