class Codec {
public:
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if (root == NULL) return "";
        queue<TreeNode*> pq;
        string s = "";
        pq.push(root);
        while (!pq.empty()) {
            TreeNode* curr = pq.front();
            pq.pop();
            if (curr == NULL) {
                s += "#,";
            } else {
                s += to_string(curr->val) + ",";
                pq.push(curr->left);
                pq.push(curr->right);
            }
        }
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if (data.size() == 0) return NULL;
        stringstream s(data);
        string str;
        getline(s, str, ',');
        TreeNode* root = new TreeNode(stoi(str));
        queue<TreeNode*> pq;
        pq.push(root);
        while (!pq.empty()) {
            TreeNode* curr = pq.front();
            pq.pop();

            // Handle left child
            if (getline(s, str, ',')) {
                if (str == "#") {
                    curr->left = NULL;
                } else {
                    TreeNode* leftNode = new TreeNode(stoi(str));
                    curr->left = leftNode;
                    pq.push(leftNode);
                }
            }

            // Handle right child
            if (getline(s, str, ',')) {
                if (str == "#") {
                    curr->right = NULL;
                } else {
                    TreeNode* rightNode = new TreeNode(stoi(str));
                    curr->right = rightNode;
                    pq.push(rightNode);
                }
            }
        }
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
