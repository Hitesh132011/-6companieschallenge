class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
        return {};
        sort(nums.begin(),nums.end());
        vector<int>dp(n,1);
        vector<int>prev(n,-1);
        int mxs=1;
        int mxi=0;
        for(int i=1;i<n;++i)
        {
            for(int j=0;j<i;++j)
            {
               if(nums[i]%nums[j]==0 && dp[j]+1>dp[i])
                {
                    dp[i]=dp[j]+1;
                    prev[i]=j;
                }
            }
            if(dp[i]>mxs)
            {
                mxs=dp[i];
                mxi=i;
            }
        }
            vector<int>res;
            while(mxi!=-1)
            {
                res.push_back(nums[mxi]);
                mxi=prev[mxi];
            }
            reverse(res.begin(),res.end());
            return res;
    }
};
